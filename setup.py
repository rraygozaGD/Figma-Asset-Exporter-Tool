#!/usr/bin/env python3
"""
Quick setup script for Figma Image Importer
This script helps users configure the application with their Figma credentials.
"""

import os
import sys

def create_config_file():
    """Create a configuration file with user input"""
    
    print("=== Figma Image Importer Setup ===\n")
    
    # Get Figma API token
    print("1. First, you need a Figma API token:")
    print("   - Go to https://www.figma.com/settings")
    print("   - Scroll to 'Personal access tokens'")
    print("   - Create a new token and copy it")
    print()
    
    api_token = input("Enter your Figma API token: ").strip()
    if not api_token:
        print("Error: API token is required!")
        return False
    
    # Get file key
    print("\n2. Enter your Figma file key:")
    print("   - Find it in your Figma URL: https://www.figma.com/file/[FILE_KEY]/...")
    print()
    
    file_key = input("Enter your Figma file key: ").strip()
    if not file_key:
        print("Error: File key is required!")
        return False
    
    # Get download path
    print("\n3. Choose download directory:")
    default_path = os.path.join(os.getcwd(), "output_images")
    download_path = input(f"Enter download path (default: {default_path}): ").strip()
    
    if not download_path:
        download_path = default_path
    
    # Create download directory if it doesn't exist
    os.makedirs(download_path, exist_ok=True)
    
    # Create config directory if it doesn't exist
    config_dir = os.path.join(os.path.dirname(__file__), "config")
    os.makedirs(config_dir, exist_ok=True)
    
    # Write configuration file
    config_path = os.path.join(config_dir, "settings.py")
    
    config_content = f'''# Figma Image Importer Configuration
# Generated by setup script

# Figma API Configuration
FIGMA_API_TOKEN = "{api_token}"
FIGMA_FILE_KEY = "{file_key}"

# Download Configuration
DOWNLOAD_PATH = r"{download_path}"

# Logging Configuration
LOG_LEVEL = "INFO"  # DEBUG, INFO, WARNING, ERROR
LOG_TO_FILE = True

# Export Configuration
EXPORT_FORMAT = "png"
EXPORT_SCALE = 2
MAX_NODES_PER_REQUEST = 100

# Filtering Configuration
FILTER_BY_SEPARATORS = True  # Only process IDs with ':' or '-'
MIN_ICON_SIZE = 16
MAX_ICON_SIZE = 512
'''
    
    try:
        with open(config_path, 'w') as f:
            f.write(config_content)
        
        print(f"\n‚úÖ Configuration saved to: {config_path}")
        print(f"‚úÖ Download directory created: {download_path}")
        print("\n=== Setup Complete! ===")
        print("\nTo run the application:")
        print("1. Activate virtual environment: venv\\Scripts\\activate")
        print("2. Run: python src/main.py")
        print("\nTo test the setup:")
        print("- Run: python test_filtering.py")
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå Error creating configuration: {e}")
        return False

def check_dependencies():
    """Check if required dependencies are installed"""
    
    print("Checking dependencies...")
    
    try:
        import requests
        print("‚úÖ requests - OK")
    except ImportError:
        print("‚ùå requests - Missing")
        print("   Install with: pip install requests")
        return False
    
    # Check optional dependencies
    try:
        import PIL
        print("‚úÖ Pillow - OK")
    except ImportError:
        print("‚ö†Ô∏è  Pillow - Missing (optional)")
    
    try:
        import dotenv
        print("‚úÖ python-dotenv - OK")
    except ImportError:
        print("‚ö†Ô∏è  python-dotenv - Missing (optional)")
    
    return True

def main():
    """Main setup function"""
    
    print("Welcome to Figma Image Importer Setup!")
    print("This script will help you configure the application.\n")
    
    # Check if we're in a virtual environment
    if sys.prefix == sys.base_prefix:
        print("‚ö†Ô∏è  Warning: You're not in a virtual environment.")
        print("   It's recommended to use a virtual environment.")
        print("   Create one with: python -m venv venv")
        print("   Activate with: venv\\Scripts\\activate\n")
        
        continue_anyway = input("Continue anyway? (y/N): ").strip().lower()
        if continue_anyway != 'y':
            print("Setup cancelled. Please set up a virtual environment first.")
            return
    
    # Check dependencies
    if not check_dependencies():
        print("\n‚ùå Missing required dependencies!")
        print("Install them with: pip install -r requirements.txt")
        return
    
    print()
    
    # Create configuration
    if create_config_file():
        print("\nüéâ Setup completed successfully!")
        print("\nNext steps:")
        print("1. Review the configuration in config/settings.py")
        print("2. Run the application: python src/main.py")
        print("3. Check the logs/ directory for detailed output")
    else:
        print("\n‚ùå Setup failed. Please try again.")

if __name__ == "__main__":
    main()
